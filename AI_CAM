import time
import sys
from Adafruit_IO import MQTTClient
from datetime import date , datetime
import cv2
from keras.models import load_model  # TensorFlow is required for Keras to work
from PIL import Image
import numpy as np
import io
import base64
np.set_printoptions(suppress=True)

# Load the model
model = load_model("keras_Model.h5", compile=False)

# Load the labels
class_names = open("labels.txt", "r").readlines()



camera = cv2.VideoCapture(0)

    
def AI_Identifying():
    
    def compress_image(image , quality = 25 ):
        
        temp_image = Image.fromarray(image)
        buffer = io.BytesIO()
        temp_image.save(buffer, format = 'JPEG', quality = quality)
        compressed_image = Image.open(buffer)
        return np.array(compressed_image)


    ret, image =camera.read()
    image = compress_image(image, quality = 25)
    res, frame = cv2.imencode(".jpg", image)
    data = base64.b64encode(frame)
    image = cv2.resize(image,(224,224), interpolation = cv2.INTER_AREA)
    cv2.imshow("Webcam Image", image)
    image = np.asarray(image, dtype=np.float32).reshape(1,224,224,3)
    image = (image / 127.5) - 1
# Create the array of the right shape to feed into the keras model
# The 'length' or number of images you can put into the array is
# determined by the first position in the shape tuple, in this case 1


# Predicts the model
    prediction = model.predict(image)
    print(prediction)
    index = np.argmax(prediction)
    class_name = class_names[index]
    confidence_score = prediction[0][index]
    return class_name [2:] , data

AIO_FEED_ID = ["Face", "Today", "Time"]
AIO_USERNAME = "Smiley8899"
AIO_KEY = "aio_qOKj41OpkHmLVnJgTXD623jPYp11"

def connected(client):
    print("Server connected...")
    for things in AIO_FEED_ID:
        client.subscribe(things)
    
    

def subscribe(client, userdata, mid, granted_qos):
    print("Subscribed!!!")

def disconnected(client):
    print("Disconnected from the server!!!")
    sys.exit(1)

def message(client, feed_id, payload):
    print( f"AI result from { feed_id } : { payload }")

    
        
client = MQTTClient(AIO_USERNAME, AIO_KEY)

client.on_connect = connected
client.on_disconnect = disconnected
client.on_message = message
client.on_subscribe = subscribe

client.connect()
client.loop_background()
pre_ai_result = ""
ai_results = ""
count = 5

while True:
    count = count -1
    if count == 0 :
        count = 5
        pre_ai_result = ai_results
        ai_results , ai_cap = AI_Identifying ()
        if pre_ai_result != ai_results :

            now = datetime . now ()
            today = date . today ()
            client . publish (" Time ", now.strftime("%H hours %M minutes %S seconds ") )                
            client . publish (" Today ", today . strftime("%B %d, %Y") )
            client . publish (" Person ", ai_results )
            client . publish (" AI_Camera ", ai_cap )

    time . sleep (1)

    keyboard_input = cv2 . waitKey (1)
    if keyboard_input == 27:
        break
